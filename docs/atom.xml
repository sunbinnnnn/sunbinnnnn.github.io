<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-09T06:55:57.052Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>NeilSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloud Devops</title>
    <link href="http://example.com/2021/04/09/Cloud-Devops/"/>
    <id>http://example.com/2021/04/09/Cloud-Devops/</id>
    <published>2021-04-09T06:55:57.000Z</published>
    <updated>2021-04-09T06:55:57.052Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>容器文件系统</title>
    <link href="http://example.com/2021/04/09/%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/04/09/%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-04-09T05:44:33.000Z</published>
    <updated>2021-04-09T05:44:33.836Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>linux container</title>
    <link href="http://example.com/2021/04/09/linux-container/"/>
    <id>http://example.com/2021/04/09/linux-container/</id>
    <published>2021-04-09T05:44:06.000Z</published>
    <updated>2021-04-09T05:44:06.883Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>cgroup</title>
    <link href="http://example.com/2021/04/09/cgroup/"/>
    <id>http://example.com/2021/04/09/cgroup/</id>
    <published>2021-04-09T05:43:53.000Z</published>
    <updated>2021-04-09T05:43:53.193Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>容器网络</title>
    <link href="http://example.com/2021/04/09/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2021/04/09/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/</id>
    <published>2021-04-09T05:43:47.000Z</published>
    <updated>2021-04-09T05:43:47.586Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>K8S Operator</title>
    <link href="http://example.com/2021/04/09/K8S-Operator/"/>
    <id>http://example.com/2021/04/09/K8S-Operator/</id>
    <published>2021-04-09T05:24:48.000Z</published>
    <updated>2021-04-09T05:24:48.123Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>内核协议栈调用</title>
    <link href="http://example.com/2021/04/09/%E5%86%85%E6%A0%B8%E5%8D%8F%E8%AE%AE%E6%A0%88%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2021/04/09/%E5%86%85%E6%A0%B8%E5%8D%8F%E8%AE%AE%E6%A0%88%E8%B0%83%E7%94%A8/</id>
    <published>2021-04-09T05:22:47.000Z</published>
    <updated>2021-04-09T05:22:47.889Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>文件IO调用</title>
    <link href="http://example.com/2021/04/09/%E6%96%87%E4%BB%B6IO%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2021/04/09/%E6%96%87%E4%BB%B6IO%E8%B0%83%E7%94%A8/</id>
    <published>2021-04-09T05:22:18.000Z</published>
    <updated>2021-04-09T05:22:18.673Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux启动过程刨析</title>
    <link href="http://example.com/2021/04/08/linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2021/04/08/linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2021-04-08T13:38:04.000Z</published>
    <updated>2021-04-14T03:11:28.417Z</updated>
    
    <content type="html"><![CDATA[<p>Linux启动过程主要包含boot和startup两个阶段。</p><span id="more"></span><p>*本文不包含硬件相关的加载细节</p><h3 id="引导-Boot-阶段"><a href="#引导-Boot-阶段" class="headerlink" title="引导(Boot)阶段"></a>引导(Boot)阶段</h3><p>Boot阶段始于按下开机键或通过内核指令执行reboot操作，之后会经历以下过程：</p><h4 id="1-BIOS-POST"><a href="#1-BIOS-POST" class="headerlink" title="1.BIOS POST"></a>1.BIOS POST</h4><p>第一阶段启动和Linux本身关系不大，主要围绕硬件启动部分，在绝大大数操作系统上行为是一致的。当计算机被启动时，首先运行的是POST（Power On Self Test 开机自检）过程，这是BIOS（Basic I/O System）的一部分。</p><p>当IBM在1981年设计了第一台PC开始，BIOS就被设计为初始化硬件的组件。POST是BIOS检查计算机硬件，并确保计算机硬件功能正常的阶段。如果POST失败了，计算机将无法正常启动，Boot程序也不会继续。</p><p>BIOS POST过程中会检查硬件的基本引导能力，当定位到可引导设备上的引导扇区时，会发出BIOS中断指令INT 13H中断BIOS POST过程。第一个被找到的引导扇区上包含了一个可用的的引导设备。第一个被找到的引导扇区将会包含一个可用的引导记录并被加载到内存，随后将引导的控制权转移从引导扇区加载的代码中。</p><p>加载引导扇区实际上是引导加载程序的第一阶段。大多数Linux发行版使用了三种引导加载程序：GRUB、GRUB2和LILO，目前用的最多的是GRUB2。</p><h4 id="2-GRUB2"><a href="#2-GRUB2" class="headerlink" title="2.GRUB2"></a>2.GRUB2</h4><p>GRUB2的全称是“GRand Unified Bootloader, version 2”，目前是Linux发行版中最主流的引导加载程序（bootloader）。GRUB2的作用是让计算机能够灵活得找到操作系统Kernel并且加载到内存中。（下文中将用GRUB指代GRUB2）。</p><p>GRUB被设计为多引导规范（<a href="https://en.wikipedia.org/wiki/Multiboot_specification">Multiboot specification</a>）支持，这使得GRUB可以引导Linux的多数版本以及其他开放操作系统，也可以链接到其他专有操作系统的引导记录（例如通过GRUB加载Windows的引导程序）。</p><p>GRUB允许用户选择从任意给定的Linux发行版的不通内核中引导，如果因为内核版本变化导致引导失败，GRUB还支持了故障回滚机制，能够引导到之前的内核版本。GRUB可以使用 <code>/boot/grub/grub.conf</code> 进行回滚策略的变更。</p><p>以下将介绍GRUB2的三个引导阶段：</p><h5 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage 1"></a>Stage 1</h5><p>在BIOS POST的POST阶段的末尾，BIOS会搜索连接的磁盘上的引导记录，通常位于主引导记录（<a href="https://en.wikipedia.org/wiki/Master_boot_record">MBR</a>）中，POST会找到第一个引导记录并加载到内存中，然后开始执行引导记录。GRUB2 stage 1即执行引导程序代码，这块被设计得非常小，因为它必须与分区表一起放在硬盘驱动器的第一个512字节扇区中。在经典的通用MBR中，为实际引导代码分区的空间量是446字节。Stage 1中的446字节文件名为<code>boot.img</code>，头部的446中不包含单独的引导分区。</p><p>由于引导记录大小的限制，使得其无法直接获取文件系统结构，因此，Stage 1阶段的唯一目的是定义并加载Stage 1.5，GRUB Stage 1.5阶段必须位于引导记录本身和驱动器第一个分区之间，GRUB Stage 1.5被加载到Ram后，控制权随即转为Stage 1.5</p><h5 id="Stage-1-5"><a href="#Stage-1-5" class="headerlink" title="Stage 1.5"></a>Stage 1.5</h5><p>Stage 1.5的工作主要是加载寻找 /boot目录中Stage 2阶段所必须的驱动。</p><p>GRUB Stage 1.5必须位于引导记录本身与磁盘驱动器第一个分区之间的空间中。硬盘驱动器的第一个分区从扇区63开始，而MBR在扇区0剩下的62个扇区（512字节-31744字节）中存放了执行Stage 1.5的<code>core.img</code>，<code>core.img</code>大小被设计为25389字节，可以被存放在MBR和磁盘第一个分区之间。</p><p>对于Stage 1.5来说，它能够存放比Stage 1多的多的代码，一般来说，一些常见文件系统的驱动程序会存放在此（例如EXT、FAT、NTFS等）。GRUB2的core.img比GRUB1更复杂，功能更强大，GRUB2的core.img可以直接位于标准EXT文件系统上（不支持放在逻辑卷上），所以Stage 2的标准路径是<code>/boot</code> 目录，一般是<code>/boot/grub2</code>。</p><p>需要注意的是，<code>/boot</code>目录必须创建在GRUB支持的文件系统上。</p><h5 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage 2"></a>Stage 2</h5><p>与GRUB1一样，GRUB2也支持从多种Linux内核之一进行引导。红帽软件包管理器DNF支持保留内核的多个版本，因此，如果最新版本的内核出现问题，则可以引导较旧版本的内核。默认情况下，GRUB提供已安装内核的预引导菜单，包括救援选项和恢复选项（如果已配置）。</p><p>GRUB Stage2阶段所需文件都在 <code>/boot/grub2</code>目录中，GRUB Stage2阶段中没有Stage1和1.5那样的image文件，主要会由运行时Kernel Modules构成，一般从<code>/boot/grub2/i386-pc</code>目录中加载。</p><p>GRUB Stage2的职责主要是定位Linux Kernel并加载到RAM中，并将整个控制权移交给kernel。</p><p>Kernel及其相关文件都位于/boot目录中，Kernel文件一般以vmlinuz开头命名，通过列出 /boot 目录的内容，可以查看当前系统安装的内核。</p><p>GRUB2 和 1都支持多内核引导。RedHat的包管理系统DNF支持在仓库中保留多个Kernel版本，如果最新版本内核出现问题，可以通过GRUB提供的内核预引导菜单（pre-boot menu），引导前一个版本的内核。</p><h5 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h5><p>为了节省磁盘空间，所有的内核均采用自解压的压缩格式。内核、初始RAM磁盘映像（InitRamFs）以及硬盘的社区映射都位于 /boot目录中。</p><p>选定的内核被加载到内存开始执行时，首先进行自解压，提取可执行作业，并加载。内核提取后首先systemd，并将启动控制权进行交接。</p><p>Boot阶段到此全部结束，此时，Linux Kernel和systemd程序正在运行。</p><h3 id="启动-Startup-阶段"><a href="#启动-Startup-阶段" class="headerlink" title="启动(Startup)阶段"></a>启动(Startup)阶段</h3><p>Startup阶段和Boot阶段完成后随即开始，主要工作是让计算机能够真正执行生产作业。</p><h5 id="0号进程和1号进程"><a href="#0号进程和1号进程" class="headerlink" title="0号进程和1号进程"></a>0号进程和1号进程</h5><p>systemd是系统的1号进程，在1号进程启动前，系统会自动创建0号进程，0号进程的pid=0，也是唯一一个没有通过<code>fork</code>或者<code>kernel_thread</code>生成的进程。</p><p>0号进程是系统所有进程的先祖，进程描述符<code>init_task</code>是内核静态创建的，而它在初始化的时候通过<code>kernel_thread</code>的方式创建了两个内核线程，分别是<code>kernel_init</code>和<code>kthreadd</code>，其中<code>kernel_init</code>为1号进程。</p><p>0号进程创建1号进程的方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel_thread(kernel_init, <span class="literal">NULL</span>, CLONE_FS);</span><br></pre></td></tr></table></figure><p>我们发现1号进程的执行函数就是kernel_init，kernel_init函数将完成设备驱动程序的初始化，并调用init_post函数启动用户空间的init进程即systemd。</p><h5 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h5><p>systemd是所有用户进程的祖先，它负责使Linux主机达到可以完成生产性工作的状态。它的某些功能比旧的init程序要更为广泛。</p><p>首先，systemd会挂载<code>/etc/fstab</code>定义的文件系统，包括所有交换分区和普通分区。此时，它可以访问/etc目录来确定系统配置相关信息。当找到配置文件<code>/etc/systemd/system/default.target</code>时，会使用该配置文件来确定将主机引导到的状态或目标。 <code>default.target</code>文件是指向真实目标文件的链接。对于带GUI界面的系统，通常将其作为<code>graphic.target</code>，等效于旧SystemV init中的runlevel 5。对于不带GUI解密的系统，默认值则为<code>multi-user.target</code>，类似于SystemV中的runlevel 3，<code>emergency.target</code>则与单用户模式相似。</p><p>下表是对systemd targets与的systemV runlevel的比较。 systemd target aliases 由systemd提供，用于向后兼容。target aliases 允许脚本使用init 3这样的SystemV命令来更改运行级别。SystemV命令将转发给systemd进行解释和执行。</p><table><thead><tr><th><strong>SystemV Runlevel</strong></th><th><strong>systemd target</strong></th><th><strong>systemd target aliases</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td></td><td>halt.target</td><td></td><td>Halts the system without powering it down.</td></tr><tr><td>0</td><td>poweroff.target</td><td>runlevel0.target</td><td>Halts the system and turns the power off.</td></tr><tr><td>S</td><td>emergency.target</td><td></td><td>Single user mode. No services are running; filesystems are not mounted. This is the most basic level of operation with only an emergency shell running on the main console for the user to interact with the system.</td></tr><tr><td>1</td><td>rescue.target</td><td>runlevel1.target</td><td>A base system including mounting the filesystems with only the most basic services running and a rescue shell on the main console.</td></tr><tr><td>2</td><td></td><td>runlevel2.target</td><td>Multiuser, without NFS but all other non-GUI services running.</td></tr><tr><td>3</td><td>multi-user.target</td><td>runlevel3.target</td><td>All services running but command line interface (CLI) only.</td></tr><tr><td>4</td><td></td><td>runlevel4.target</td><td>Unused.</td></tr><tr><td>5</td><td>graphical.target</td><td>runlevel5.target</td><td>multi-user with a GUI.</td></tr><tr><td>6</td><td>reboot.target</td><td>runlevel6.target</td><td>Reboot</td></tr><tr><td></td><td>default.target</td><td></td><td>This target is always aliased with a symbolic link to either multi-user.target or graphical.target. systemd always uses the default.target to start the system. The default.target should never be aliased to halt.target, poweroff.target, or reboot.target.</td></tr></tbody></table><p>每个target都有对应的配置文件可供配置，并且具备相互依赖的特性，下图描述了target的依赖关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">local-fs-pre.target</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">   (various mounts and   (various swap   (various cryptsetup</span><br><span class="line">    fsck services...)     devices...)        devices...)       (various low-level   (various low-level</span><br><span class="line">            |                  |                  |             services: udevd,     API VFS mounts:</span><br><span class="line">            v                  v                  v             tmpfiles, random     mqueue, configfs,</span><br><span class="line">     local-fs.target      swap.target     cryptsetup.target    seed, sysctl, ...)      debugfs, ...)</span><br><span class="line">            |                  |                  |                    |                    |</span><br><span class="line">            \__________________|_________________ | ___________________|____________________&#x2F;</span><br><span class="line">                                                 \|&#x2F;</span><br><span class="line">                                                  v</span><br><span class="line">                                           sysinit.target</span><br><span class="line">                                                  |</span><br><span class="line">             ____________________________________&#x2F;|\________________________________________</span><br><span class="line">            &#x2F;                  |                  |                    |                    \</span><br><span class="line">            |                  |                  |                    |                    |</span><br><span class="line">            v                  v                  |                    v                    v</span><br><span class="line">        (various           (various               |                (various          rescue.service</span><br><span class="line">       timers...)          paths...)              |               sockets...)               |</span><br><span class="line">            |                  |                  |                    |                    v</span><br><span class="line">            v                  v                  |                    v              rescue.target</span><br><span class="line">      timers.target      paths.target             |             sockets.target</span><br><span class="line">            |                  |                  |                    |</span><br><span class="line">            v                  \_________________ | ___________________&#x2F;</span><br><span class="line">                                                 \|&#x2F;</span><br><span class="line">                                                  v</span><br><span class="line">                                            basic.target</span><br><span class="line">                                                  |</span><br><span class="line">             ____________________________________&#x2F;|                                 emergency.service</span><br><span class="line">            &#x2F;                  |                  |                                         |</span><br><span class="line">            |                  |                  |                                         v</span><br><span class="line">            v                  v                  v                                 emergency.target</span><br><span class="line">        display-        (various system    (various system</span><br><span class="line">    manager.service         services           services)</span><br><span class="line">            |             required for            |</span><br><span class="line">            |            graphical UIs)           v</span><br><span class="line">            |                  |           multi-user.target</span><br><span class="line">            |                  |                  |</span><br><span class="line">            \_________________ | _________________&#x2F;</span><br><span class="line">                              \|&#x2F;</span><br><span class="line">                               v</span><br><span class="line">                     graphical.target</span><br></pre></td></tr></table></figure><p>根据依赖拓扑完成启动后，Linux系统结束启动过程。</p><h3 id="附录：关于initramd的定制"><a href="#附录：关于initramd的定制" class="headerlink" title="附录：关于initramd的定制"></a>附录：关于initramd的定制</h3><p>解压：</p><p><code>xz -dc &lt; initrd.img| cpio -idmv</code></p><p>打包：</p><p><code>find . 2&gt;/dev/null | cpio -c -o | xz -9 --format=xz --check=crc32 &gt; /tmp/new.img</code></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://opensource.com/article/17/2/linux-boot-and-startup">https://opensource.com/article/17/2/linux-boot-and-startup</a></p><p><a href="https://blog.csdn.net/gatieme/article/details/51532804">https://blog.csdn.net/gatieme/article/details/51532804</a></p><p><a href="https://www.golinuxcloud.com/update-rebuild-initrd-image-centos-rhel-7-8/#Method_2_Extract_initrd_image">https://www.golinuxcloud.com/update-rebuild-initrd-image-centos-rhel-7-8/#Method_2_Extract_initrd_image</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux启动过程主要包含boot和startup两个阶段。&lt;/p&gt;</summary>
    
    
    
    
    <category term="system" scheme="http://example.com/tags/system/"/>
    
  </entry>
  
</feed>
